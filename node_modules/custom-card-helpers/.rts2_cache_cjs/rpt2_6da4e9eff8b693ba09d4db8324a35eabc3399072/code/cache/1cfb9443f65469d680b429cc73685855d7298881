{"code":"export * from \"./fire-event\";\r\nexport * from \"./haptic\";\r\n//# sourceMappingURL=index.js.map","map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/index.ts\"],\"names\":[],\"mappings\":\"AAUA,cAAc,cAAc,CAAC;AAC7B,cAAc,UAAU,CAAC\"}","dts":{"name":"/home/iantrich/projects/hass/cards/custom-card-helpers/index.d.ts","writeByteOrderMark":false,"text":"import { HassEntities, HassConfig, Auth, Connection, MessageBase, HassServices } from \"home-assistant-js-websocket\";\r\nimport { HapticType } from \"./haptic\";\r\nexport * from \"./fire-event\";\r\nexport * from \"./haptic\";\r\nexport interface ToggleActionConfig {\r\n    action: \"toggle\";\r\n    haptic?: HapticType;\r\n}\r\nexport interface ToggleMenuActionConfig {\r\n    action: \"toggle-menu\";\r\n    haptic?: HapticType;\r\n}\r\nexport interface CallServiceActionConfig {\r\n    action: \"call-service\";\r\n    haptic?: HapticType;\r\n    service: string;\r\n    service_data?: {\r\n        entity_id?: string | [string];\r\n        [key: string]: any;\r\n    };\r\n}\r\nexport interface NavigateActionConfig {\r\n    action: \"navigate\";\r\n    haptic?: HapticType;\r\n    navigation_path: string;\r\n}\r\nexport interface MoreInfoActionConfig {\r\n    action: \"more-info\";\r\n    haptic?: HapticType;\r\n    entity?: string;\r\n}\r\nexport interface UrlActionConfig {\r\n    action: \"url\";\r\n    haptic?: HapticType;\r\n    url: string;\r\n}\r\nexport interface NoActionConfig {\r\n    action: \"none\";\r\n}\r\nexport declare type ActionConfig = ToggleActionConfig | ToggleMenuActionConfig | CallServiceActionConfig | NavigateActionConfig | MoreInfoActionConfig | UrlActionConfig | NoActionConfig;\r\ndeclare global {\r\n    interface HASSDomEvents {\r\n        \"value-changed\": {\r\n            value: unknown;\r\n        };\r\n        \"config-changed\": {\r\n            config: any;\r\n        };\r\n        \"hass-more-info\": {\r\n            entityId: string | null;\r\n        };\r\n        \"ll-rebuild\": {};\r\n        undefined: any;\r\n    }\r\n}\r\nexport declare type ValidHassDomEvent = keyof HASSDomEvents;\r\nexport declare type LocalizeFunc = (key: string, ...args: any[]) => string;\r\nexport interface Credential {\r\n    auth_provider_type: string;\r\n    auth_provider_id: string;\r\n}\r\nexport interface MFAModule {\r\n    id: string;\r\n    name: string;\r\n    enabled: boolean;\r\n}\r\nexport interface CurrentUser {\r\n    id: string;\r\n    is_owner: boolean;\r\n    name: string;\r\n    credentials: Credential[];\r\n    mfa_modules: MFAModule[];\r\n}\r\nexport interface Theme {\r\n    \"primary-color\": string;\r\n    \"text-primary-color\": string;\r\n    \"accent-color\": string;\r\n}\r\nexport interface Themes {\r\n    default_theme: string;\r\n    themes: {\r\n        [key: string]: Theme;\r\n    };\r\n}\r\nexport interface Panel {\r\n    component_name: string;\r\n    config: {\r\n        [key: string]: any;\r\n    } | null;\r\n    icon: string | null;\r\n    title: string | null;\r\n    url_path: string;\r\n}\r\nexport interface Panels {\r\n    [name: string]: Panel;\r\n}\r\nexport interface Resources {\r\n    [language: string]: {\r\n        [key: string]: string;\r\n    };\r\n}\r\nexport interface Translation {\r\n    nativeName: string;\r\n    isRTL: boolean;\r\n    fingerprints: {\r\n        [fragment: string]: string;\r\n    };\r\n}\r\nexport interface HomeAssistant {\r\n    auth: Auth;\r\n    connection: Connection;\r\n    connected: boolean;\r\n    states: HassEntities;\r\n    services: HassServices;\r\n    config: HassConfig;\r\n    themes: Themes;\r\n    selectedTheme?: string | null;\r\n    panels: Panels;\r\n    panelUrl: string;\r\n    language: string;\r\n    selectedLanguage: string;\r\n    resources: Resources;\r\n    localize: LocalizeFunc;\r\n    translationMetadata: {\r\n        fragments: string[];\r\n        translations: {\r\n            [lang: string]: Translation;\r\n        };\r\n    };\r\n    dockedSidebar: boolean;\r\n    moreInfoEntityId: string;\r\n    user: CurrentUser;\r\n    callService: (domain: string, service: string, serviceData?: {\r\n        [key: string]: any;\r\n    }) => Promise<void>;\r\n    callApi: <T>(method: \"GET\" | \"POST\" | \"PUT\" | \"DELETE\", path: string, parameters?: {\r\n        [key: string]: any;\r\n    }) => Promise<T>;\r\n    fetchWithAuth: (path: string, init?: {\r\n        [key: string]: any;\r\n    }) => Promise<Response>;\r\n    sendWS: (msg: MessageBase) => Promise<void>;\r\n    callWS: <T>(msg: MessageBase) => Promise<T>;\r\n}\r\n"}}
